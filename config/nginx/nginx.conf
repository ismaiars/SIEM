# =============================================================================
# Nginx Configuration for SIEM OpenSource PyMES
# =============================================================================
# This configuration file sets up Nginx as a reverse proxy and load balancer
# for the SIEM solution components with SSL termination and security headers
# =============================================================================

# Main context
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Worker connections and performance
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# HTTP context
http {
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Include server configurations
    include /etc/nginx/conf.d/*.conf;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format json_combined escape=json
        '{'
            '"time_local":"$time_local",'  
            '"remote_addr":"$remote_addr",'  
            '"remote_user":"$remote_user",'  
            '"request":"$request",'  
            '"status": "$status",'  
            '"body_bytes_sent":"$body_bytes_sent",'  
            '"request_time":"$request_time",'  
            '"http_referrer":"$http_referer",'  
            '"http_user_agent":"$http_user_agent",'  
            '"http_x_forwarded_for":"$http_x_forwarded_for",'  
            '"http_host":"$http_host",'  
            '"server_name":"$server_name",'  
            '"upstream_addr":"$upstream_addr",'  
            '"upstream_status":"$upstream_status",'  
            '"upstream_response_time":"$upstream_response_time"'  
        '}';

    access_log /var/log/nginx/access.log json_combined;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Buffer sizes
    client_body_buffer_size 128k;
    client_max_body_size 100m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Timeouts
    client_header_timeout 3m;
    client_body_timeout 3m;
    send_timeout 3m;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/x-javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;
    gzip_disable "MSIE [1-6]\."; 

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=1r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA;
    ssl_prefer_server_ciphers off;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Upstream definitions
    upstream elasticsearch {
        least_conn;
        server elasticsearch:9200 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # upstream kibana {
    #     least_conn;
    #     server kibana:5601 max_fails=3 fail_timeout=30s;
    #     keepalive 32;
    # }

    # upstream wazuh-dashboard {
    #     least_conn;
    #     server wazuh-dashboard:5601 max_fails=3 fail_timeout=30s;
    #     keepalive 32;
    # }

    # upstream grafana {
    #     least_conn;
    #     server grafana:3000 max_fails=3 fail_timeout=30s;
    #     keepalive 32;
    # }

    # upstream wazuh-manager {
    #     least_conn;
    #     server wazuh-manager:55000 max_fails=3 fail_timeout=30s;
    #     keepalive 32;
    # }

    upstream logstash {
        least_conn;
        server logstash:9600 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Map for WebSocket upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Default server (catch-all)
    # server {
    #     listen 80 default_server;
    #     listen [::]:80 default_server;
    #     server_name _;
    #     return 301 https://$host$request_uri;
    # }

    # Main SIEM Dashboard (Kibana)
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name siem.local kibana.local;

    #     # SSL certificates
    #     ssl_certificate /etc/nginx/ssl/siem.crt;
    #     ssl_certificate_key /etc/nginx/ssl/siem.key;

    #     # Security and rate limiting
    #     limit_conn conn_limit_per_ip 10;
    #     limit_conn conn_limit_per_server 100;
    #     limit_req zone=general burst=5 nodelay;

    #     # Logging
    #     access_log /var/log/nginx/kibana_access.log json_combined;
    #     error_log /var/log/nginx/kibana_error.log;

    #     # Main location
    #     # location / {
    #     #     proxy_pass http://kibana;
    #     #     proxy_http_version 1.1;
    #     #     proxy_set_header Upgrade $http_upgrade;
    #     #     proxy_set_header Connection $connection_upgrade;
    #     #     proxy_set_header Host $host;
    #     #     proxy_set_header X-Real-IP $remote_addr;
    #     #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     #     proxy_set_header X-Forwarded-Proto $scheme;
    #     #     proxy_set_header X-Forwarded-Host $host;
    #     #     proxy_set_header X-Forwarded-Port $server_port;

    #     #     # Timeouts
    #     #     proxy_connect_timeout 60s;
    #     #     proxy_send_timeout 60s;
    #     #     proxy_read_timeout 60s;

    #     #     # Buffer settings
    #     #     proxy_buffering on;
    #     #     proxy_buffer_size 4k;
    #     #     proxy_buffers 8 4k;
    #     #     proxy_busy_buffers_size 8k;

    #     #     # Security headers for Kibana
    #     #     add_header X-Frame-Options "SAMEORIGIN";
    #     #     add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:;";
    #     # }

    #     # Kibana API endpoints
    #     # location /api/ {
    #     #     limit_req zone=api burst=20 nodelay;
    #     #     proxy_pass http://kibana;
    #     #     proxy_http_version 1.1;
    #     #     proxy_set_header Host $host;
    #     #     proxy_set_header X-Real-IP $remote_addr;
    #     #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     #     proxy_set_header X-Forwarded-Proto $scheme;
    #     # }

    #     # WebSocket support for Kibana
    #     # location /socket.io/ {
    #     #     proxy_pass http://kibana;
    #     #     proxy_http_version 1.1;
    #     #     proxy_set_header Upgrade $http_upgrade;
    #     #     proxy_set_header Connection "upgrade";
    #     #     proxy_set_header Host $host;
    #     #     proxy_set_header X-Real-IP $remote_addr;
    #     #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     #     proxy_set_header X-Forwarded-Proto $scheme;
    #     # }
    # }

    # Wazuh Dashboard (comentado hasta que wazuh-dashboard est√© disponible)
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name wazuh.local wazuh-dashboard.local;
    #
    #     # SSL certificates
    #     ssl_certificate /etc/nginx/ssl/wazuh.crt;
    #     ssl_certificate_key /etc/nginx/ssl/wazuh.key;
    #
    #     # Security and rate limiting
    #     limit_conn conn_limit_per_ip 10;
    #     limit_req zone=general burst=5 nodelay;
    #
    #     # Logging
    #     access_log /var/log/nginx/wazuh_access.log json_combined;
    #     error_log /var/log/nginx/wazuh_error.log;
    #
    #     location / {
    #         proxy_pass http://wazuh-dashboard;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection $connection_upgrade;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #
    #         # Timeouts
    #         proxy_connect_timeout 60s;
    #         proxy_send_timeout 60s;
    #         proxy_read_timeout 60s;
    #     }
    #
    #     # Wazuh API
    #     location /api/ {
    #         limit_req zone=api burst=20 nodelay;
    #         proxy_pass http://wazuh-manager;
    #         proxy_http_version 1.1;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    # }

    # Grafana Monitoring Dashboard
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name grafana.local monitoring.local;

    #     # SSL certificates
    #     ssl_certificate /etc/nginx/ssl/grafana.crt;
    #     ssl_certificate_key /etc/nginx/ssl/grafana.key;

    #     # Security and rate limiting
    #     limit_conn conn_limit_per_ip 10;
    #     limit_req zone=general burst=5 nodelay;

    #     # Logging
    #     access_log /var/log/nginx/grafana_access.log json_combined;
    #     error_log /var/log/nginx/grafana_error.log;

    #     location / {
    #         proxy_pass http://grafana;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection $connection_upgrade;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;

    #         # Grafana specific headers
    #         proxy_set_header Authorization $http_authorization;
    #         proxy_pass_header Authorization;
    #     }

    #     # Grafana API
    #     location /api/ {
    #         limit_req zone=api burst=20 nodelay;
    #         proxy_pass http://grafana;
    #         proxy_http_version 1.1;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }

    #     # WebSocket support for Grafana live features
    #     location /api/live/ {
    #         proxy_pass http://grafana;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    # }

    # Elasticsearch API (restricted access)
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name elasticsearch.local es.local;

    #     # SSL certificates
    #     ssl_certificate /etc/nginx/ssl/elasticsearch.crt;
    #     ssl_certificate_key /etc/nginx/ssl/elasticsearch.key;

    #     # Security and rate limiting
    #     limit_conn conn_limit_per_ip 5;
    #     limit_req zone=api burst=10 nodelay;

    #     # Logging
    #     access_log /var/log/nginx/elasticsearch_access.log json_combined;
    #     error_log /var/log/nginx/elasticsearch_error.log;

    #     # Basic authentication for Elasticsearch
    #     auth_basic "Elasticsearch Access";
    #     auth_basic_user_file /etc/nginx/.htpasswd;

    #     # Health check endpoint (no auth required)
    #     location /_cluster/health {
    #         auth_basic off;
    #         proxy_pass http://elasticsearch;
    #         proxy_http_version 1.1;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }

    #     # Main Elasticsearch API
    #     location / {
    #         proxy_pass http://elasticsearch;
    #         proxy_http_version 1.1;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;

    #         # Restrict dangerous operations
    #         if ($request_method !~ ^(GET|POST|PUT|HEAD)$) {
    #             return 405;
    #         }

    #         # Block delete operations on indices
    #         if ($request_uri ~ "^/[^/]+/_delete") {
    #             return 403;
    #         }
    #     }

    #     # Search API with higher rate limit
    #     location ~ ^/.*/_search {
    #         limit_req zone=api burst=50 nodelay;
    #         proxy_pass http://elasticsearch;
    #         proxy_http_version 1.1;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    # }

    # Logstash Monitoring API
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name logstash.local;

    #     # SSL certificates
    #     ssl_certificate /etc/nginx/ssl/logstash.crt;
    #     ssl_certificate_key /etc/nginx/ssl/logstash.key;

    #     # Security and rate limiting
    #     limit_conn conn_limit_per_ip 5;
    #     limit_req zone=api burst=10 nodelay;

    #     # Logging
    #     access_log /var/log/nginx/logstash_access.log json_combined;
    #     error_log /var/log/nginx/logstash_error.log;

    #     # Basic authentication
    #     auth_basic "Logstash Monitoring";
    #     auth_basic_user_file /etc/nginx/.htpasswd;

    #     location / {
    #         proxy_pass http://logstash;
    #         proxy_http_version 1.1;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    # }

    # Status and health check endpoint
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name status.local health.local;

    #     # SSL certificates
    #     ssl_certificate /etc/nginx/ssl/status.crt;
    #     ssl_certificate_key /etc/nginx/ssl/status.key;

    #     # Logging
    #     access_log /var/log/nginx/status_access.log json_combined;
    #     error_log /var/log/nginx/status_error.log;

    #     # Nginx status
    #     location /nginx_status {
    #         stub_status on;
    #         access_log off;
    #         allow 127.0.0.1;
    #         allow 172.18.0.0/16;
    #         deny all;
    #     }

    #     # Health check endpoint
    #     location /health {
    #         access_log off;
    #         return 200 "healthy\n";
    #         add_header Content-Type text/plain;
    #     }

    #     # Service status checks
    #     location /health/elasticsearch {
    #         access_log off;
    #         proxy_pass http://elasticsearch/_cluster/health;
    #         proxy_method GET;
    #         proxy_pass_request_body off;
    #         proxy_set_header Content-Length "";
    #         proxy_set_header X-Original-URI $request_uri;
    #     }

    #     # location /health/kibana {
    #     #     access_log off;
    #     #     proxy_pass http://kibana/api/status;
    #     #     proxy_method GET;
    #     #     proxy_pass_request_body off;
    #     #     proxy_set_header Content-Length "";
    #     #     proxy_set_header X-Original-URI $request_uri;
    #     # }

    #     # location /health/grafana {
    #     #     access_log off;
    #     #     proxy_pass http://grafana/api/health;
    #     #     proxy_method GET;
    #     #     proxy_pass_request_body off;
    #     #     proxy_set_header Content-Length "";
    #     #     proxy_set_header X-Original-URI $request_uri;
    #     # }
    # }

    # Error pages (comentado temporalmente)
    # error_page 404 /404.html;
    # error_page 500 502 503 504 /50x.html;

    # location = /404.html {
    #     root /usr/share/nginx/html;
    #     internal;
    # }

    # location = /50x.html {
    #     root /usr/share/nginx/html;
    #     internal;
    # }

    # Security: Hide sensitive files (comentado temporalmente)
    # location ~ /\. {
    #     deny all;
    #     access_log off;
    #     log_not_found off;
    # }

    # location ~ ~$ {
    #     deny all;
    #     access_log off;
    #     log_not_found off;
    # }

    # Block common attack patterns
    # location ~* \.(php|asp|aspx|jsp)$ {
    #     deny all;
    #     access_log off;
    #     log_not_found off;
    # }

    # Block access to sensitive directories
    # location ~ ^/(config|logs|data|backup)/ {
    #     deny all;
    #     access_log off;
    #     log_not_found off;
    # }
}

# Stream context for TCP/UDP load balancing
stream {
    # Logging
    log_format stream_format '$remote_addr [$time_local] '
                            '$protocol $status $bytes_sent $bytes_received '
                            '$session_time "$upstream_addr" '
                            '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';

    access_log /var/log/nginx/stream_access.log stream_format;
    error_log /var/log/nginx/stream_error.log;

    # Wazuh agent communication
    # upstream wazuh_agents {
    #     server wazuh-manager:1514;
    # }

    # Wazuh agent registration
    # upstream wazuh_registration {
    #     server wazuh-manager:1515;
    # }

    # Syslog forwarding
    upstream syslog_servers {
        server logstash:5140;
    }

    # Wazuh agent communication (TCP)
    # server {
    #     listen 1514;
    #     proxy_pass wazuh_agents;
    #     proxy_timeout 1s;
    #     proxy_responses 1;
    #     error_log /var/log/nginx/wazuh_agents_error.log;
    # }

    # Wazuh agent registration (TCP)
    # server {
    #     listen 1515;
    #     proxy_pass wazuh_registration;
    #     proxy_timeout 1s;
    #     proxy_responses 1;
    #     error_log /var/log/nginx/wazuh_registration_error.log;
    # }

    # Syslog forwarding (UDP)
    server {
        listen 514 udp;
        proxy_pass syslog_servers;
        proxy_timeout 1s;
        proxy_responses 1;
        error_log /var/log/nginx/syslog_error.log;
    }

    # Beats input (Filebeat, Metricbeat, etc.)
    server {
        listen 5044;
        proxy_pass logstash:5044;
        proxy_timeout 1s;
        proxy_responses 1;
        error_log /var/log/nginx/beats_error.log;
    }
}